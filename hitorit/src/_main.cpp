/*
#include <cairo.h>
#include <cairo-pdf.h>
#include <cstdio>

void draw_grid(const char* stream, cairo_t *cr) {
	int rectangle_size = 50;

	// small rectangles
	cairo_set_line_width(cr, 1);
	for (int x=0; x < 9; x++)
	{
		for (int y=0; y < 9; y++)
		{
			cairo_rectangle(cr, x*rectangle_size, y*rectangle_size, rectangle_size, rectangle_size);
		}
	}
	cairo_stroke(cr);

	// numbers
	cairo_select_font_face(cr, "Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
	cairo_set_font_size(cr, 25.0);
	int c;
	char tmp_str[2];
	for(int row=0; row < 9; row++)
	{
		for(int	col=0; col < 9; col++)
		{
			c = stream[row*9+col];
			if (c != '.')
			{
				cairo_move_to(cr, rectangle_size/3 + rectangle_size * row, rectangle_size/1.5 + rectangle_size * col);
				snprintf(tmp_str, 2, "%c", c);
				cairo_show_text(cr, tmp_str);
			}
		}
	}
}

void generate_pdf(int difficulty, int sudokus_count, const char* filename) {
	cairo_surface_t *surface;
	cairo_t *cr;

	surface = cairo_pdf_surface_create(filename, 595, 842);
	cr = cairo_create(surface);

	cairo_set_source_rgb(cr, 0, 0, 0);
	cairo_set_line_cap(cr, CAIRO_LINE_CAP_SQUARE);

	cairo_select_font_face(cr, "Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
	cairo_set_font_size(cr, 10.0);

	// difficulty is dependant on translation. let's be safe here and use snprintf() in case it's very long.
	//char tmp_str[512];
	//snprintf(tmp_str, 512, "sudoku level: %s", difficulty_to_str(difficulty));

	cairo_move_to(cr, 50.0, 70.0);
	//cairo_show_text(cr, tmp_str);
	cairo_move_to(cr, 50.0, 80.0);
	cairo_show_text(cr, "generated by nudoku - http://jubalh.github.io/nudoku/");

	cairo_save(cr);

	cairo_scale(cr, 0.5, 0.5);

	int start_x = 0;
	int start_y = 0;
	for (int i=0; i < sudokus_count; i++)
	{
		if (i == 0) {
			// absolute page offset
			cairo_translate(cr, 100, 270);
		}

		if (i % 2 == 0)
		{
			// sudoku in the left column
			cairo_translate(cr, -start_x, 0);
			start_x = 0;
		} else {
			// sudoku in the right column
			cairo_translate(cr, 0, -start_y);
			start_x = 550;
		}

		if ((i%4) / 2 == 0)
		{
			// sudoku at the top of the page
			start_y = 0;
		} else {
			// sudoku at the bottom of the page
			start_y = 600;
		}

		//char* stream;
		//stream = generate_puzzle(difficulty);

#ifdef DEBUG
		printf("%d: %s\n", i, stream);
#endif // DEBUG

		cairo_translate(cr, start_x, start_y);
		draw_grid("123456789", cr);

		if ((i+1) % 4 == 0 && i+1 < sudokus_count)
		{
			// new page
			cairo_translate(cr, 0, -start_y);
			cairo_show_page(cr);
		}
	}

	cairo_restore(cr);

	cairo_show_page(cr);
	cairo_destroy(cr);
	cairo_surface_destroy(surface);
}

void generate_png(int difficulty, char* filename) {
	cairo_surface_t *surface;
	cairo_t *cr;

	surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 453, 453);
	cr = cairo_create(surface);

	cairo_set_source_rgb(cr, 0, 0, 0);
	cairo_set_line_cap(cr, CAIRO_LINE_CAP_SQUARE);

	cairo_select_font_face(cr, "Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
	cairo_set_font_size(cr, 10.0);

	cairo_translate(cr, 2, 2);
	draw_grid("123456789", cr);
	cairo_surface_write_to_png(surface, filename);

	cairo_destroy(cr);
	cairo_surface_destroy(surface);
}

void generate_output(int difficulty, char* filename, int sudokuCount, bool isPDF) {
	if (isPDF)
	{
		generate_pdf(difficulty, sudokuCount, filename);
	} else {
		generate_png(difficulty, filename);
	}
}

int main(int argc, char *argv[]) {
	cairo_surface_t *surface;
	cairo_t *cr;
	int rectangle_size = 50;

	surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, 120, 120);
	cr = cairo_create (surface);

	cairo_set_line_width (cr, 0.1);
	cairo_set_source_rgb (cr, 0, 0, 0);

	cairo_rectangle (cr, 0.25, 0.25, 0.5, 0.5);
	cairo_stroke (cr);
	for (int x=0; x < 9; x++)
	{
		for (int y=0; y < 9; y++)
		{
			cairo_rectangle(cr, x*rectangle_size, y*rectangle_size, rectangle_size, rectangle_size);
		}
	}
	cairo_stroke (cr);
}
*/
