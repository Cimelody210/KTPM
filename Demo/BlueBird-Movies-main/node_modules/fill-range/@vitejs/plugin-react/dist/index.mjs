DefaultMinWidth:E,dialogDefaultMaxWidth:T});return y.createElement(gl,v.a({elementToFocusOnDismiss:a,firstFocusableSelector:s,forceFocusInsideTrap:l,ignoreExternalFocusing:d,isClickableOutsideFocusTrap:h,onDismissed:b,responsiveMode:S},D,{isDarkOverlay:void 0!==f?f:D.isDarkOverlay,isBlocking:void 0!==p?p:D.isBlocking,isOpen:void 0!==m?m:!u,className:N.root,containerClassName:N.main,onDismiss:g||D.onDismiss,subtitleAriaId:this._getSubTextId(),titleAriaId:this._getTitleTextId()}),y.createElement(wl,v.a({titleId:this._defaultTitleTextId,subTextId:this._defaultSubTextId,title:k,subText:x,showCloseButton:void 0!==p?!p:!D.isBlocking,topButtonsProps:w||M.topButtonsProps,type:void 0!==I?I:M.type,onDismiss:g||M.onDismiss,className:i||M.className},M),this.props.children))},t.defaultProps={hidden:!0},t=v.b([Js.b],t)}(y.Component),Pl={root:"ms-Dialog"},Dl=Object(k.a)(Ol,(function(e){var t,n=e.className,o=e.containerClassName,r=e.dialogDefaultMinWidth,i=void 0===r?"288px":r,a=e.dialogDefaultMaxWidth,s=void 0===a?"340px":a,l=e.hidden,c=e.theme;return{root:[Object(_.N)(Pl,c).root,c.fonts.medium,n],main:[{width:i,outline:"3px solid transparent",selectors:(t={},t["@media (min-width: "+_.v+"px)"]={width:"auto",maxWidth:s,minWidth:i},t)},!l&&{display:"flex"},o]}}),void 0,{scope:"Dialog"}),Ml=n(135);!function(e){e[e.normal=0]="normal",e[e.compact=1]="compact"}(el||(el={}));var Nl,Rl=Object(w.a)(),Fl=function(e){function t(t){var n=e.call(this,t)||this;return n._rootElement=y.createRef(),n._onClick=function(e){n._onAction(e)},n._onKeyDown=function(e){e.which!==te.a.enter&&e.which!==te.a.space||n._onAction(e)},n._onAction=function(e){var t=n.props,o=t.onClick,r=t.onClickHref;o?o(e):!o&&r&&(window.location.href=r,e.preventDefault(),e.stopPropagation())},n._warnDeprecations({accentColor:void 0}),n}return v.c(t,e),t.prototype.render=function(){var e,t=this.props,n=t.onClick,o=t.onClickHref,r=t.children,i=t.type,a=t.accentColor,s=t.styles,l=t.theme,c=t.className,u=Object(T.j)(this.props,T.h,["className","onClick","type","role"]),d=!(!n&&!o);this._classNames=Rl(s,{theme:l,className:c,actionable:d,compact:i===el.compact}),i===el.compact&&a&&(e={borderBottomColor:a});var p=this.props.role||(d?n?"button":"link":void 0),h=d?0:void 0;return y.createElement("div",v.a({ref:this._rootElement,tabIndex:h,"data-is-focusable":d,role:p,className:this._classNames.root,onKeyDown:d?this._onKeyDown:void 0,onClick:d?this._onClick:void 0,style:e},u),r)},t.prototype.focus=function(){this._rootElement.current&&this._rootElement.current.focus()},t.defaultProps={type:el.normal},t}(O.a),Ll={root:"ms-DocumentCardPreview",icon:"ms-DocumentCardPreview-icon",iconContainer:"ms-DocumentCardPreview-iconContainer"},Bl={root:"ms-DocumentCardActivity",multiplePeople:"ms-DocumentCardActivity--multiplePeople",details:"ms-DocumentCardActivity-details",name:"ms-DocumentCardActivity-name",activity:"ms-DocumentCardActivity-activity",avatars:"ms-DocumentCardActivity-avatars",avatar:"ms-DocumentCardActivity-avatar"},Al={root:"ms-DocumentCardTitle"},jl={root:"ms-DocumentCardLocation"},Hl={root:"ms-DocumentCard",rootActionable:"ms-DocumentCard--actionable",rootCompact:"ms-DocumentCard--compact"},zl=Object(k.a)(Fl,(function(e){var t,n,o=e.className,r=e.theme,i=e.actionable,a=e.compact,s=r.palette,l=Object(_.N)(Hl,r);return{root:[l.root,{WebkitFontSmoothing:"antialiased",backgroundColor:s.white,border:"1px solid "+s.neutralLight,boxSizing:"border-box",maxWidth:"320px",minWidth:"206px",userSelect:"none",position:"relative",selectors:(t={},t["."+jl.root+" + ."+Al.root]={paddingTop:"4px"},t)},i&&[l.rootActionable,{selectors:{":hover":{cursor:"pointer",borderColor:s.neutralTertiaryAlt},":hover:after":{content:'" "',position:"absolute",top:0,right:0,bottom:0,left:0,border:"1px solid "+s.neutralTertiaryAlt,pointerEvents:"none"}}}],a&&[l.rootCompact,{display:"flex",maxWidth:"480px",height:"108px",selectors:(n={},n["."+Ll.root]={borderRight:"1px solid "+s.neutralLight,borderBottom:0,maxHeight:"106px",maxWidth:"144px"},n["."+Ll.icon]={maxHeight:"32px",maxWidth:"32px"},n["."+Bl.root]={paddingBottom:"12 === false
          }
        };
      }
    },
    configResolved(config) {
      devBase = config.base;
      projectRoot = config.root;
      filter = createFilter(opts.include, opts.exclude, {
        resolve: projectRoot
      });
      needHiresSourcemap = config.command === "build" && !!config.build.sourcemap;
      isProduction = config.isProduction;
      skipFastRefresh || (skipFastRefresh = isProduction || config.command === "build");
      const jsxInject = config.esbuild && config.esbuild.jsxInject;
      if (jsxInject && importReactRE.test(jsxInject)) {
        skipReactImport = true;
        config.logger.warn(
          "[@vitejs/plugin-react] This plugin imports React for you automatically, so you can stop using `esbuild.jsxInject` for that purpose."
        );
      }
      config.plugins.forEach((plugin) => {
        const hasConflict = plugin.name === "react-refresh" || plugin !== viteReactJsx && plugin.name === "vite:react-jsx";
        if (hasConflict)
          return config.logger.warn(
            `[@vitejs/plugin-react] You should stop using "${plugin.name}" since this plugin conflicts with it.`
          );
      });
      runPluginOverrides = (babelOptions, context) => {
        const hooks = config.plugins.map((plugin) => plugin.api?.reactBabel).filter(Boolean);
        if (hooks.length > 0) {
          return (runPluginOverrides = (babelOptions2, context2) => {
            hooks.forEach((hook) => hook(babelOptions2, context2, config));
            return true;
          })(babelOptions, context);
        }
        runPluginOverrides = () => false;
        return false;
      };
    },
    async transform(code, id, options) {
      const ssr = options?.ssr === true;
      const [filepath, querystring = ""] = id.split("?");
      const [extension = ""] = querystring.match(fileExtensionRE) || filepath.match(fileExtensionRE) || [];
      if (/\.(?:mjs|[tj]sx?)$/.test(extension)) {
        const isJSX = extension.endsWith("x");
        const isNodeModules = id.includes("/node_modules/");
        const isProjectFile = !isNodeModules && (id[0] === "\0" || id.startsWith(projectRoot + "/"));
        let babelOptions = staticBabelOptions;
        if (typeof opts.babel === "function") {
          const rawOptions = opts.babel(id, { ssr });
          babelOptions = createBabelOptions(rawOptions);
          runPluginOverrides(babelOptions, { ssr, id });
        } else if (!babelOptions) {
          babelOptions = createBabelOptions(opts.babel);
          if (!runPluginOverrides(babelOptions, { ssr, id })) {
            staticBabelOptions = babelOptions;
          }
        }
        const plugins = isProjectFile ? [...babelOptions.plugins] : [];
        let useFastRefresh = false;
        if (!skipFastRefresh && !ssr && !isNodeModules) {
          const isReactModule = isJSX || importReactRE.test(code);
          if (isReactModule && filter(id)) {
            useFastRefresh = true;
            plugins.push([
              await loadPlugin("react-refresh/babel"),
              { skipEnvCheck: true }
            ]);
          }
        }
        let prependReactImport = false;
        if (!isProjectFile || isJSX) {
          if (!useAutomaticRuntime && isProjectFile) {
            if (!isProduction) {
              plugins.push(
                await loadPlugin("@babel/plugin-transform-react-jsx-self"),
                await loadPlugin("@babel/plugin-transform-react-jsx-source")
              );
            }
            if (!skipReactImport && !importReactRE.test(code)) {
              prependReactImport = true;
            }
          }
        }
        let inputMap;
        if (prependReactImport) {
          if (needHiresSourcemap) {
            const s = new MagicString(code);
            s.prepend(prependReactImportCode);
            code = s.toString();
            inputMap = s.generateMap({ hires: true, source: id });
          } else {
            code = prependReactImportCode + code;
          }
        }
        const shouldSkip = !plugins.length && !babelOptions.configFile && !(isProjectFile && babelOptions.babelrc);
        if (shouldSkip) {
          return {
            code,
            map: inputMap ?? null
          };
        }
        const parserPlugins = [
          ...babelOptions.parserOpts.plugins,
          "importMeta",
          // This plugin is applied before esbuild transforms the code,
          // so we need to enable some stage 3 syntax that is supported in
          // TypeScript and some environments already.
          "topLevelAwait",
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods"
        ];
        if (!extension.endsWith(".ts")) {
          parserPlugins.push("jsx");
        }
        if (/\.tsx?$/.test(extension)) {
          parserPlugins.push("typescript");
        }
        const result = await babel.transformAsync(code, {
          ...babelOptions,
          root: projectRoot,
          filename: id,
          sourceFileName: filepath,
          parserOpts: {
            ...babelOptions.parserOpts,
            sourceType: "module",
            allowAwaitOutsideFunction: true,
            plugins: parserPlugins
          },
          generatorOpts: {
            ...babelOptions.generatorOpts,
            decoratorsBeforeExport: true
          },
          plugins,
          sourceMaps: true,
          // Vite handles sourcemap flattening
          inputSourceMap: inputMap ?? false
        });
        if (result) {
          let code2 = result.code;
          if (useFastRefresh && refreshContentRE.test(code2)) {
            code2 = addRefreshWrapper(code2, id);
          }
          return {
            code: code2,
            map: result.map
          };
        }
      }
    }
  };
  const viteReactRefresh = {
    name: "vite:react-refresh",
    enforce: "pre",
    config: () => ({
      resolve: {
        dedupe: ["react", "react-dom"]
      }
    }),
    resolveId(id) {
      if (id === runtimePublicPath) {
        return id;
      }
    },
    load(id) {
      if (id === runtimePublicPath) {
        return runtimeCode;
      }
    },
    transformIndexHtml() {
      if (!skipFastRefresh)
        return [
          {
            tag: "script",
            attrs: { type: "module" },
            children: preambleCode.replace(`__BASE__`, devBase)
          }
        ];
    }
  };
  const reactJsxRuntimeId = "react/jsx-runtime";
  const reactJsxDevRuntimeId = "react/jsx-dev-runtime";
  const virtualReactJsxRuntimeId = "\0" + reactJsxRuntimeId;
  const virtualReactJsxDevRuntimeId = "\0" + reactJsxDevRuntimeId;
  const viteReactJsx = {
    name: "vite:react-jsx",
    enforce: "pre",
    config() {
      return {
        optimizeDeps: {
          // We can't add `react-dom` because the dependency is `react-dom/client`
          // for React 18 while it's `react-dom` for React 17. We'd need to detect
          // what React version the user has installed.
          include: [reactJsxRuntimeId, reactJsxDevRuntimeId, "react"]
        }
      };
    },
    resolveId(id, importer) {
      if (id === reactJsxRuntimeId && importer !== virtualReactJsxRuntimeId) {
        return virtualReactJsxRuntimeId;
      }
      if (id === reactJsxDevRuntimeId && importer !== virtualReactJsxDevRuntimeId) {
        return virtualReactJsxDevRuntimeId;
      }
    },
    load(id) {
      if (id === virtualReactJsxRuntimeId) {
        return [
          `import * as jsxRuntime from ${JSON.stringify(reactJsxRuntimeId)}`,
          `export const Fragment = jsxRuntime.Fragment`,
          `export const jsx = jsxRuntime.jsx`,
          `export const jsxs = jsxRuntime.jsxs`
        ].join("\n");
      }
      if (id === virtualReactJsxDevRuntimeId) {
        return [
          `import * as jsxRuntime from ${JSON.stringify(reactJsxDevRuntimeId)}`,
          `export const Fragment = jsxRuntime.Fragment`,
          `export const jsxDEV = jsxRuntime.jsxDEV`
        ].join("\n");
      }
    }
  };
  return [viteBabel, viteReactRefresh, useAutomaticRuntime && viteReactJsx];
}
viteReact.preambleCode = preambleCode;
function loadPlugin(path2) {
  return import(path2).then((module) => module.default || module);
}
function createBabelOptions(rawOptions) {
  var _a;
  const babelOptions = {
    babelrc: false,
    configFile: false,
    ...rawOptions
  };
  babelOptions.plugins || (babelOptions.plugins = []);
  babelOptions.presets || (babelOptions.presets = []);
  babelOptions.overrides || (babelOptions.overrides = []);
  babelOptions.parserOpts || (babelOptions.parserOpts = {});
  (_a = babelOptions.parserOpts).plugins || (_a.plugins = []);
  return babelOptions;
}

export { viteReact as default };
